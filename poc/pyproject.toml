[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-native-poc"
version = "0.1.0"
description = "POC demonstrating AI-Native Application Architecture concepts"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "CC-BY-4.0"}
authors = [
    {name = "AI-Native POC Team", email = "poc@ai-native.dev"}
]
keywords = ["ai-native", "mcp", "a2a", "agents", "microservices"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",

    # AI & LLM
    "anthropic>=0.7.0",
    "a2a-sdk>=0.3.0",

    # HTTP & API Clients
    "httpx>=0.24.0",
    "aiohttp>=3.9.0",

    # Database & Storage
    "sqlalchemy>=2.0.0",

    # Data Processing
    "numpy>=1.24.0",
    "pandas>=2.0.0",

    # Token Counting
    "tiktoken>=0.5.0",

    # Utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "rich>=13.0.0",

    # Async & Concurrency
    "asyncio-contextmanager>=1.0.0",

    # Logging & Monitoring
    "python-json-logger>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "black>=23.9.0",
    "ruff>=0.0.290",
    "mypy>=1.5.0",
    "isort>=5.12.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "hypothesis>=6.82.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]

all = [
    "ai-native-poc[dev,test,docs]",
]

[project.urls]
Homepage = "https://github.com/coolksrini/ai-native-application-architecture-whitepaper"
Documentation = "https://github.com/coolksrini/ai-native-application-architecture-whitepaper/tree/main/poc"
Repository = "https://github.com/coolksrini/ai-native-application-architecture-whitepaper"
Issues = "https://github.com/coolksrini/ai-native-application-architecture-whitepaper/issues"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra --strict-markers --tb=short"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "llm: Tests that call LLM APIs",
    "chapter2: Chapter 2 - Intent Recognition",
    "chapter5: Chapter 5 - MCP Services",
    "chapter6: Chapter 6 - UI Rendering",
    "chapter7: Chapter 7 - Security",
    "chapter8: Chapter 8 - Context",
    "chapter10: Chapter 10 - Testing",
    "chapter11: Chapter 11 - Training",
]

[tool.coverage.run]
branch = true
source = ["poc"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.env
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_mode = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [".git", ".venv", "build", "dist"]

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "D",    # pydocstyle
]
ignore = [
    "E501",  # line too long (handled by black)
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "D104"]
"tests/**/*.py" = ["D100", "D101", "D102", "D103"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.hatch.build.targets.wheel]
packages = ["."]

